---
title: "Assignment 6 - Split-plot randomization"
author: "Ruben Vinueza"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a split-plot RCBD randomization. 

For that, you will first need to watch (and code along with) the following split-plot randomization video:

- split-plot randomization: https://youtu.be/rXTp3Vw_770?si=MajBK1aZ221orfpa&t=3401 (starts at 00:56:41, watch till end, about 50-min total)

- The partial script for the video above is in our GitHub repository, 04-classcode, **02-13_spp_randomization_partial.qmd**.


**AFTER watching the video and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `05_spp` project folder  
  - On this script, fill your name under the `title` section of the YAML  
  
# Goal of this assignment  
The goal is this assignment is for you to **design a split-plot RCBD design applicable to your area of study**.  

This could be from your own experience, an example from the literature, or something you come up entirely on your own (as long as it makes sense).  

In the headings below, you will answer a couple of questions related to study objectives and treatment design, and then move on to randomize your study, create a plot layout, and export the designed table to file.  

# Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}
library(tidyverse)
library(janitor) 
```

# Treatment design  
## Objectives  
Write here what are the objectives of the study you are designing. Remember that objectives are closely connected with your treatment design, so whatever you say are your objectives should carry through on your choice of treatment factors and levels.  

Objectives: Determine the amount of yeast and the fermentation time which can produce the beer with the highest carbonation in four different fermentation tanks. 


## Treatment design explanation  
Here is where you explain your treatment design, including the name of the treatment factors, their levels (don't forget to include units), and which is the whole-plot treatment factor and which one is the split-plot treatment factor.  

Treatment factor: Fermentation time (FT) in hours (h)
Levels: 24, 48 and 72 hours
Treatment factor: Yeast amount (YA) in kilogram (kg)
Levels: 1,3 and 5 kilograms 
The blocks will be the 4 fermentation tanks 

## Code  
```{r data import}
spp_rcbd_a <- read_csv("../data/beer_fermentation_data.csv") %>%
   clean_names() 

spp_rcbd_a
```

EDA tables  
```{r summary}
summary(spp_rcbd_a)
```

```{r glimpse}
glimpse(spp_rcbd_a)
```

Wrangling
```{r rcbd_aw}
spp_rcbd_aw <- spp_rcbd_a %>%
  mutate(fermentation_tank = factor(fermentation_tank),
         fermentation_time_h = factor(fermentation_time_h),
         yeast_amount_kg = factor(yeast_amount_kg) 
         ) %>%
  mutate(trtname = paste0(fermentation_time_h, "+", yeast_amount_kg))

spp_rcbd_aw
```

```{r}
summary(spp_rcbd_aw)
```
Number of blocks: 4  
Number o treatments: 3 fermentation times x 3 yeast amounts = 9
Number of observations: 4 x 9 = 36  
Carbonation: from 200 to 4820 CO2 

# Split-plot in RCBD  
## WP randomization  
```{r wp_rcbd_rand}
#Setting seed to get some randomization result every time 
set.seed(760)

wp_rcbd_rand <- crossing(fermentation_time_h = c(24,48,72),
                         block = 1:4) %>%
 arrange(block) %>%
 # Randomizing Whole Plot treatment factor to blocks (restricted)
 group_by(block) %>%
 mutate(fermentation_time_h = sample (fermentation_time_h)) %>%
 #Creating WP plot numbers
 mutate(wplot = (block*100)+ 1:3) %>% 
 ungroup()

wp_rcbd_rand
```

## SP randomization  

Randomization of the split-plot treatment factor (Amount of Yeast) to the WP treatment plots.
```{r sp_rcbd_rand}
sp_rcbd_rand <- crossing(yeast_amount_kg = c(1,3,5),
                         wplot = wp_rcbd_rand$wplot
                         ) %>%
 arrange(wplot) %>%
 # Randomizing SP treatment factor to WP plots (restricted)
 group_by(wplot) %>%
 mutate(yeast_amount_kg = sample(yeast_amount_kg)) %>%
 # Creating SP plot numbers
 mutate(splot = paste0(wplot,"-",1:3)) %>%
 ungroup()

sp_rcbd_rand
```
## Joining WP and SP into one object
```{r spp_rcbd_rand}
spp_rcbd_rand <- wp_rcbd_rand %>%
  right_join(sp_rcbd_rand) %>%
  mutate(trtname = paste0(fermentation_time_h, "+", yeast_amount_kg))

spp_rcbd_rand
```

## Plot layout  
```{r spp_rcbd_layout,warning=FALSE, message=FALSE}
spp_rcbd_layout <- spp_rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:4, each = 9)) %>% 
  mutate(col = rep(seq(from = 1,
                       to = 9, #total number of treatments,
                       by = 1),
                   times = 4 #total number of blocks
                       )) %>%
  # Creating plot and trtname labels for plotting 
  mutate(lab = paste0(splot, "\n", trtname))

spp_rcbd_layout
```

```{r spp rcbd map,warning=FALSE, message=FALSE}
ggplot(data = spp_rcbd_layout, aes(x = row,
                                   y = -col)) +
  geom_tile(aes(fill = factor(yeast_amount_kg)),
            color = "black",
            show.legend = F
            ) +
  geom_tile(aes(color = fermentation_time_h),
            show.legend = F,
            size = 2,
            linetype = 2,
            fill = NA
            ) +
  geom_text(aes(label = splot), fontface = "bold", vjust = -.4) +
  scale_fill_manual(values = c("lightblue",
                               "lightgreen",
                               "lightyellow")) +
  geom_text(aes(label = trtname), vjust = 1) +
  labs(title = "Split-plot RCBD randomization of FT(wholeplot) x 3 YA(split-plot) treatment design") +
  theme_void() +
  theme(plot.margin = margin(0.5, 40, 40, 0.5)) 

```
# Exporting to file  
```{r}
spp_rcbd_rand %>%
  # Rearranging columns 
  dplyr::select(block, wplot, fermentation_time_h,
                splot, yeast_amount_kg,
                trtname) %>%
  write_csv("../output/spp_rcbd_randomization_assigment.csv")
```

```{r}
ggsave("../output/spp_rcbd_layoutmap_assigment.png",
       width = 10,
       height = 5,
       bg = "white")
```

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-06-spp-LASTNAME.html`.    

For ex., mine would be `Assignment-06-spp-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #6 - Split-plot randomization** by Feb 20 11:59 pm.  
  




